
from collections import defaultdict

class Graph:
  
    def __init__(self,vertices):
        self.V= vertices
        self.graph = defaultdict(list)
        self.parent = [-1 for i in range(vertices)]

    def addEdge(self,u,v):
        self.graph[u].append(v)

    def find(self, u):
      elem = self.parent[u]
      if elem < 0:
        return u
      return self.find(elem)
    
    def union(self, u, v):
      self.parent[v] = u

    def isCycle(self):
      cycleEdges = []
      for u, neighbors in self.graph.items():
        uParent = self.find(u)
        print('----')
        print('u is:  ')
        print(u)
        print(uParent)
        print('----')
        for v in neighbors:
          vParent = self.find(v)
          print('----')
          print(v)
          print(vParent)
          print('----')          
          if uParent == vParent:
            cycleEdges.append([u,v])
          else:
            self.union(u, v)
      return cycleEdges
            
      

    



g = Graph(6)
g.addEdge(0, 1)
g.addEdge(1, 2)
g.addEdge(2, 0)


g.addEdge(1, 3)
g.addEdge(3, 4)
g.addEdge(4, 5)
g.addEdge(5,3)
print(g.isCycle())
print(g.parent)

print(g.graph)
